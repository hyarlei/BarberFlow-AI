generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(cuid())
  email         String            @unique
  password      String
  role          UserRole          @default(CLIENT)
  isActive      Boolean           @default(true)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  lastLoginAt   DateTime?
  createdBy     String?
  updatedBy     String?
  appointments  AppointmentUser[]
  loyaltyPoints LoyaltyPoint[]
  notifications Notification[]
  payments      Payment[]
  profile       Profile?
  reviews       Review[]

  @@map("users")
}

model Profile {
  id            String         @id @default(cuid())
  userId        String         @unique
  firstName     String
  lastName      String
  phone         String?
  avatar        String?
  dateOfBirth   DateTime?
  gender        String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  preferences   Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  barberProfile BarberProfile?
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model BarberProfile {
  id           String          @id @default(cuid())
  profileId    String          @unique
  bio          String?
  experience   Int?
  specialties  String[]
  portfolio    String[]
  rating       Float           @default(0)
  totalReviews Int             @default(0)
  isAvailable  Boolean         @default(true)
  workingHours Json?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  appointments Appointment[]
  profile      Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  services     BarberService[]
  reviews      Review[]

  @@map("barber_profiles")
}

model Service {
  id             String          @id @default(cuid())
  name           String
  description    String?
  duration       Int
  basePrice      Float
  category       String
  isActive       Boolean         @default(true)
  imageUrl       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  appointments   Appointment[]
  barberServices BarberService[]

  @@map("services")
}

model BarberService {
  id            String        @id @default(cuid())
  barberId      String
  serviceId     String
  customPrice   Float?
  isAvailable   Boolean       @default(true)
  estimatedTime Int?
  barber        BarberProfile @relation(fields: [barberId], references: [id], onDelete: Cascade)
  service       Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([barberId, serviceId])
  @@map("barber_services")
}

model Appointment {
  id            String            @id @default(cuid())
  barberId      String
  serviceId     String
  scheduledFor  DateTime
  duration      Int
  totalPrice    Float
  notes         String?
  status        AppointmentStatus @default(SCHEDULED)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  completedAt   DateTime?
  cancelledAt   DateTime?
  cancelReason  String?
  users         AppointmentUser[]
  barber        BarberProfile     @relation(fields: [barberId], references: [id])
  service       Service           @relation(fields: [serviceId], references: [id])
  notifications Notification[]
  payments      Payment[]
  review        Review?

  @@map("appointments")
}

model AppointmentUser {
  id            String      @id @default(cuid())
  appointmentId String
  userId        String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([appointmentId, userId])
  @@map("appointment_users")
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  appointmentId   String?
  amount          Float
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?
  gatewayResponse Json?
  metadata        Json?
  processedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  appointment     Appointment?  @relation(fields: [appointmentId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Review {
  id            String        @id @default(cuid())
  userId        String
  barberId      String
  appointmentId String        @unique
  rating        Int
  comment       String?
  isPublic      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  appointment   Appointment   @relation(fields: [appointmentId], references: [id])
  barber        BarberProfile @relation(fields: [barberId], references: [id])
  user          User          @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Notification {
  id            String           @id @default(cuid())
  userId        String
  appointmentId String?
  type          NotificationType
  title         String
  message       String
  content       String?
  link          String?
  metadata      Json?
  isRead        Boolean          @default(false)
  sentAt        DateTime?
  createdAt     DateTime         @default(now())
  appointment   Appointment?     @relation(fields: [appointmentId], references: [id])
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model LoyaltyPoint {
  id          String   @id @default(cuid())
  userId      String
  points      Int
  reason      String
  type        String
  referenceId String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("loyalty_points")
}

model Campaign {
  id          String         @id @default(cuid())
  title       String
  description String?
  type        String
  status      CampaignStatus @default(DRAFT)
  targetRules Json?
  content     Json
  scheduledAt DateTime?
  sentAt      DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("campaigns")
}

model Product {
  id             String          @id @default(cuid())
  name           String
  description    String?
  sku            String          @unique
  price          Float
  category       String
  brand          String?
  stock          Int             @default(0)
  minStock       Int             @default(0)
  isActive       Boolean         @default(true)
  imageUrl       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  stockMovements StockMovement[]

  @@map("products")
}

model StockMovement {
  id          String   @id @default(cuid())
  productId   String
  type        String
  quantity    Int
  reason      String
  referenceId String?
  notes       String?
  createdAt   DateTime @default(now())
  product     Product  @relation(fields: [productId], references: [id])

  @@map("stock_movements")
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("user_sessions")
}

model UserBehavior {
  id        String   @id @default(cuid())
  userId    String
  action    String
  metadata  Json?
  sessionId String?
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())

  @@map("user_behavior")
}

model PredictionModel {
  id         String   @id @default(cuid())
  name       String
  version    String
  modelPath  String?
  isActive   Boolean  @default(false)
  accuracy   Float?
  parameters Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("prediction_models")
}

enum UserRole {
  ADMIN
  BARBER
  CLIENT
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  CASH
  MERCADO_PAGO
  STRIPE
}

enum NotificationType {
  EMAIL
  SMS
  WHATSAPP
  PUSH
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}
